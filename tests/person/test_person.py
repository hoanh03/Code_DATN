# Automatically generated tests for person
import pytest
import dataclasses
import datetime
import typing
import typing
from source_files.person import Person

# This file was generated by the test_case_generator

# Tests for class Person

@pytest.fixture
def person_instance():
    # Create a valid instance of Person for testing
    return Person(*['bH4RL5N9Pkgdw6gY', 0])

# Tests for Person constructor
@pytest.mark.parametrize('constructor_inputs', [
    # Constructor with age=0
    ['bH4RL5N9Pkgdw6gY', 0],
    # Constructor with age=1
    ['jvRV9CI', 1],
    # Constructor with age=100
    ['dn', 100],
    # Constructor with inputs: ['qBbn1LFaI', 664]
    ['qBbn1LFaI', 664],
    # Constructor with inputs: ['MeHf', 703]
    ['MeHf', 703],
    # Constructor with inputs: ['BpbdPL', 686]
    ['BpbdPL', 686],
    # Constructor with inputs: ['y1AVAoI', 98]
    ['y1AVAoI', 98],
    # Constructor with inputs: ['tFOIoJuhNUT0T8', 858]
    ['tFOIoJuhNUT0T8', 858],
    # Constructor with inputs: ['uWiBh', 158]
    ['uWiBh', 158],
    # Constructor with inputs: ['Riw6lFAQen5Up0bUbA75', 379]
    ['Riw6lFAQen5Up0bUbA75', 379],
])
def test_Person_constructor(constructor_inputs):
    instance = person_instance
    assert isinstance(instance, Person)

def test_Person_constructor_raises_0():
    # Constructor with name= (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['', 779])

def test_Person_constructor_raises_1():
    # Constructor with name=a (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['a', -524])

def test_Person_constructor_raises_2():
    # Constructor with name=  (raises ValueError)
    with pytest.raises(ValueError):
        Person(*[' ', -421])

def test_Person_constructor_raises_3():
    # Constructor with name=abc (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['abc', -31])

def test_Person_constructor_raises_4():
    # Constructor with name=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', -270])

def test_Person_constructor_raises_5():
    # Constructor with age=-1 (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['y', -1])

def test_Person_constructor_raises_6():
    # Constructor with age=-100 (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['utie7', -100])

def test_Person_constructor_raises_7():
    # Constructor with inputs: ['lY14oZLl5g7zl', -207] (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['lY14oZLl5g7zl', -207])

def test_Person_constructor_raises_8():
    # Constructor with inputs: ['vII2X6ilKUE5mBkgM', -150] (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['vII2X6ilKUE5mBkgM', -150])

def test_Person_constructor_raises_9():
    # Constructor with inputs: ['hcYfaN5RXhzu20wUiy', -544] (raises ValueError)
    with pytest.raises(ValueError):
        Person(*['hcYfaN5RXhzu20wUiy', -544])

# Tests for Person.greet method
def test_Person_greet_raises_0(person_instance):
    # Instance method greet - constructor fails with ValueError: Age cannot be negative
    with pytest.raises(ValueError):
        instance = person_instance
        instance.greet(*[])

# Tests for Person.have_birthday method
def test_Person_have_birthday_raises_0(person_instance):
    # Instance method have_birthday - constructor fails with ValueError: Age cannot be negative
    with pytest.raises(ValueError):
        instance = person_instance
        instance.have_birthday(*[])
