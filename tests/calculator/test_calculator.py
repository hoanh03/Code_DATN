# Automatically generated tests for calculator using CSV data
import pytest
import dataclasses
import datetime
import typing
from source_files.calculator import absolute, add, divide, modulus, multiply, power, square_root, subtract

# This file was generated by the test_case_generator with CSV data

# Tests for function absolute
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for absolute
    ([5], 5),
    # CSV-defined test for absolute
    ([10], 10),
    # CSV-defined test for absolute
    ([0], 0),
    # CSV-defined test for absolute
    ([-10], 10),
    # CSV-defined test for absolute
    ([100], 100),
])
def test_absolute(inputs, expected):
    assert absolute(*inputs) == expected

def test_absolute_raises_0():
    # CSV-defined test for absolute
    with pytest.raises(ValueError):
        absolute(*[-5])

def test_absolute_raises_1():
    # CSV-defined test for absolute
    with pytest.raises(ZeroDivisionError):
        absolute(*[5])

def test_absolute_raises_2():
    # CSV-defined test for absolute
    with pytest.raises(ValueError):
        absolute(*[-7])


# Tests for function add
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for add
    ([5, 3], 8),
    # CSV-defined test for add
    ([10, 2], 12),
    # CSV-defined test for add
    ([0, 5], 5),
    # CSV-defined test for add
    ([-10, -5], -15),
    # CSV-defined test for add
    ([100, 10], 110),
])
def test_add(inputs, expected):
    assert add(*inputs) == expected

def test_add_raises_0():
    # CSV-defined test for add
    with pytest.raises(ValueError):
        add(*[-5, 3])

def test_add_raises_1():
    # CSV-defined test for add
    with pytest.raises(ZeroDivisionError):
        add(*[5, 0])

def test_add_raises_2():
    # CSV-defined test for add
    with pytest.raises(ValueError):
        add(*[-7, 2])


# Tests for function divide
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for divide
    ([5, 3], 1.6666666666666667),
    # CSV-defined test for divide
    ([10, 2], 5.0),
    # CSV-defined test for divide
    ([0, 5], 0.0),
    # CSV-defined test for divide
    ([-10, -5], 2.0),
    # CSV-defined test for divide
    ([100, 10], 10.0),
])
def test_divide(inputs, expected):
    assert divide(*inputs) == expected

def test_divide_raises_0():
    # CSV-defined test for divide
    with pytest.raises(ValueError):
        divide(*[-5, 3])

def test_divide_raises_1():
    # CSV-defined test for divide
    with pytest.raises(ZeroDivisionError):
        divide(*[5, 0])

def test_divide_raises_2():
    # CSV-defined test for divide
    with pytest.raises(ValueError):
        divide(*[-7, 2])


# Tests for function modulus
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for modulus
    ([5, 3], 2),
    # CSV-defined test for modulus
    ([10, 2], 0),
    # CSV-defined test for modulus
    ([0, 5], 0),
    # CSV-defined test for modulus
    ([-10, -5], 0),
    # CSV-defined test for modulus
    ([100, 10], 0),
])
def test_modulus(inputs, expected):
    assert modulus(*inputs) == expected

def test_modulus_raises_0():
    # CSV-defined test for modulus
    with pytest.raises(ValueError):
        modulus(*[-5, 3])

def test_modulus_raises_1():
    # CSV-defined test for modulus
    with pytest.raises(ZeroDivisionError):
        modulus(*[5, 0])

def test_modulus_raises_2():
    # CSV-defined test for modulus
    with pytest.raises(ValueError):
        modulus(*[-7, 2])


# Tests for function multiply
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for multiply
    ([5, 3], 15),
    # CSV-defined test for multiply
    ([10, 2], 20),
    # CSV-defined test for multiply
    ([0, 5], 0),
    # CSV-defined test for multiply
    ([-10, -5], 50),
    # CSV-defined test for multiply
    ([100, 10], 1000),
])
def test_multiply(inputs, expected):
    assert multiply(*inputs) == expected

def test_multiply_raises_0():
    # CSV-defined test for multiply
    with pytest.raises(ValueError):
        multiply(*[-5, 3])

def test_multiply_raises_1():
    # CSV-defined test for multiply
    with pytest.raises(ZeroDivisionError):
        multiply(*[5, 0])

def test_multiply_raises_2():
    # CSV-defined test for multiply
    with pytest.raises(ValueError):
        multiply(*[-7, 2])


# Tests for function power
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for power
    ([5, 3], 125),
    # CSV-defined test for power
    ([10, 2], 100),
    # CSV-defined test for power
    ([0, 5], 0),
    # CSV-defined test for power
    ([-10, -5], 1e-05),
    # CSV-defined test for power
    ([100, 10], 10000000000),
])
def test_power(inputs, expected):
    assert power(*inputs) == expected

def test_power_raises_0():
    # CSV-defined test for power
    with pytest.raises(ValueError):
        power(*[-5, 3])

def test_power_raises_1():
    # CSV-defined test for power
    with pytest.raises(ZeroDivisionError):
        power(*[5, 0])

def test_power_raises_2():
    # CSV-defined test for power
    with pytest.raises(ValueError):
        power(*[-7, 2])


# Tests for function square_root
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for square_root
    ([5], 2.23606797749979),
    # CSV-defined test for square_root
    ([10], 3.1622776601683795),
    # CSV-defined test for square_root
    ([0], 0.0),
    # CSV-defined test for square_root
    ([-10], None),
    # CSV-defined test for square_root
    ([100], 10.0),
])
def test_square_root(inputs, expected):
    assert square_root(*inputs) == expected

def test_square_root_raises_0():
    # CSV-defined test for square_root
    with pytest.raises(ValueError):
        square_root(*[-5])

def test_square_root_raises_1():
    # CSV-defined test for square_root
    with pytest.raises(ZeroDivisionError):
        square_root(*[5])

def test_square_root_raises_2():
    # CSV-defined test for square_root
    with pytest.raises(ValueError):
        square_root(*[-7])


# Tests for function subtract
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for subtract
    ([5, 3], 2),
    # CSV-defined test for subtract
    ([10, 2], 8),
    # CSV-defined test for subtract
    ([0, 5], -5),
    # CSV-defined test for subtract
    ([-10, -5], -5),
    # CSV-defined test for subtract
    ([100, 10], 90),
])
def test_subtract(inputs, expected):
    assert subtract(*inputs) == expected

def test_subtract_raises_0():
    # CSV-defined test for subtract
    with pytest.raises(ValueError):
        subtract(*[-5, 3])

def test_subtract_raises_1():
    # CSV-defined test for subtract
    with pytest.raises(ZeroDivisionError):
        subtract(*[5, 0])

def test_subtract_raises_2():
    # CSV-defined test for subtract
    with pytest.raises(ValueError):
        subtract(*[-7, 2])
