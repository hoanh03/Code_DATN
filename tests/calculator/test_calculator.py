# Automatically generated tests for calculator
import pytest
import dataclasses
import datetime
import typing
from source_files.calculator import absolute, add, divide, modulus, multiply, power, square_root, subtract

# This file was generated by the test_case_generator

# Tests for function absolute
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0], 0),
    # Edge case for a=1
    ([1], 1),
    # Edge case for a=-1
    ([-1], 1),
    # Edge case for a=100
    ([100], 100),
    # Edge case for a=-100
    ([-100], 100),
    # Test with inputs: [-315]
    ([-315], 315),
    # Test with inputs: [-957]
    ([-957], 957),
    # Test with inputs: [912]
    ([912], 912),
    # Test with inputs: [-279]
    ([-279], 279),
    # Test with inputs: [-968]
    ([-968], 968),
])
def test_absolute(inputs, expected):
    assert absolute(*inputs) == expected


# Tests for function add
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0, -255], -255),
    # Edge case for a=1
    ([1, 871], 872),
    # Edge case for a=-1
    ([-1, 794], 793),
    # Edge case for a=100
    ([100, 849], 949),
    # Edge case for a=-100
    ([-100, -622], -722),
    # Edge case for b=0
    ([-791, 0], -791),
    # Edge case for b=1
    ([448, 1], 449),
    # Edge case for b=-1
    ([509, -1], 508),
    # Edge case for b=100
    ([-897, 100], -797),
    # Edge case for b=-100
    ([-275, -100], -375),
    # Test with inputs: [876, 656]
    ([876, 656], 1532),
    # Test with inputs: [354, 164]
    ([354, 164], 518),
    # Test with inputs: [-503, 929]
    ([-503, 929], 426),
    # Test with inputs: [-228, 317]
    ([-228, 317], 89),
    # Test with inputs: [552, 114]
    ([552, 114], 666),
])
def test_add(inputs, expected):
    assert add(*inputs) == expected


# Tests for function divide
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0, -567], -0.0),
    # Edge case for a=1
    ([1, 492], 0.0020325203252032522),
    # Edge case for a=-1
    ([-1, 841], -0.0011890606420927466),
    # Edge case for a=100
    ([100, -690], -0.14492753623188406),
    # Edge case for a=-100
    ([-100, 731], -0.13679890560875513),
    # Edge case for b=1
    ([664, 1], 664.0),
    # Edge case for b=-1
    ([516, -1], -516.0),
    # Edge case for b=100
    ([-131, 100], -1.31),
    # Edge case for b=-100
    ([-522, -100], 5.22),
    # Test with inputs: [62, -435]
    ([62, -435], -0.1425287356321839),
    # Test with inputs: [-562, -515]
    ([-562, -515], 1.09126213592233),
    # Test with inputs: [-756, -452]
    ([-756, -452], 1.6725663716814159),
    # Test with inputs: [-828, -390]
    ([-828, -390], 2.123076923076923),
    # Test with inputs: [-362, -42]
    ([-362, -42], 8.619047619047619),
])
def test_divide(inputs, expected):
    assert divide(*inputs) == expected

def test_divide_raises_0():
    # Edge case for b=0 (raises ZeroDivisionError)
    with pytest.raises(ZeroDivisionError):
        divide(*[-523, 0])


# Tests for function modulus
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0, 851], 0),
    # Edge case for a=1
    ([1, -666], -665),
    # Edge case for a=-1
    ([-1, 207], 206),
    # Edge case for a=100
    ([100, -518], -418),
    # Edge case for a=-100
    ([-100, 539], 439),
    # Edge case for b=1
    ([793, 1], 0),
    # Edge case for b=-1
    ([-66, -1], 0),
    # Edge case for b=100
    ([705, 100], 5),
    # Edge case for b=-100
    ([-292, -100], -92),
    # Test with inputs: [-41, 22]
    ([-41, 22], 3),
    # Test with inputs: [-554, -539]
    ([-554, -539], -15),
    # Test with inputs: [-304, -229]
    ([-304, -229], -75),
    # Test with inputs: [-997, 58]
    ([-997, 58], 47),
    # Test with inputs: [-195, 616]
    ([-195, 616], 421),
])
def test_modulus(inputs, expected):
    assert modulus(*inputs) == expected

def test_modulus_raises_0():
    # Edge case for b=0 (raises ZeroDivisionError)
    with pytest.raises(ZeroDivisionError):
        modulus(*[409, 0])


# Tests for function multiply
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0, 403], 0),
    # Edge case for a=1
    ([1, -357], -357),
    # Edge case for a=-1
    ([-1, 6], -6),
    # Edge case for a=100
    ([100, 894], 89400),
    # Edge case for a=-100
    ([-100, -576], 57600),
    # Edge case for b=0
    ([-425, 0], 0),
    # Edge case for b=1
    ([946, 1], 946),
    # Edge case for b=-1
    ([217, -1], -217),
    # Edge case for b=100
    ([379, 100], 37900),
    # Edge case for b=-100
    ([691, -100], -69100),
    # Test with inputs: [-140, -435]
    ([-140, -435], 60900),
    # Test with inputs: [-404, 426]
    ([-404, 426], -172104),
    # Test with inputs: [263, -300]
    ([263, -300], -78900),
    # Test with inputs: [605, 806]
    ([605, 806], 487630),
    # Test with inputs: [147, -471]
    ([147, -471], -69237),
])
def test_multiply(inputs, expected):
    assert multiply(*inputs) == expected


# Tests for function power
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=1
    ([1, -308], 1.0),
    # Edge case for a=-1
    ([-1, 942], 1),
    # Edge case for a=100
    ([100, 222], 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    # Edge case for a=-100
    ([-100, 554], 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    # Edge case for b=0
    ([821, 0], 1),
    # Edge case for b=1
    ([288, 1], 288),
    # Edge case for b=-1
    ([912, -1], 0.0010964912280701754),
    # Edge case for b=100
    ([-841, 100], 30171686032891590288212050664961240285674622026063072977616378156310284565202340600135160727795480386875034098639718014836525713001369977976877795356435429034440647872068160158341277770655063333078150242783190426840823442112876265135918177374502229759995960712218936601822101301969456593604001),
    # Edge case for b=-100
    ([8, -100], 4.909093465297727e-91),
    # Test with inputs: [-712, 309]
    ([-712, 309], -260806273484320900996023622139229705562445977872724334192099524583299608748237345639346890431484102591615536379954286831512180940325176877754717029650944795414387500343360288389659511656024522227891393691691551139711855013425388205991722606186712600050517452213496349833839812240637468873727352460509960583064120199322775898118728606893503058562330351345993552958643978738375944056901198089875828121549301513040606741046196172836183536736906935826611595097737732310919484121100082373047500378437490337992446237768025117527525201903511385633288229106147246367192720938560497453091298177062236785656040578351532901793177980607670623209740180459401619474521709763893101835095879646113711844638015252045778352879638396259257181794047496351035444472199225640757548575412105361406178558678809566173544163661871874821517137265115144409635353937784633302997561462170214387336841580513329152),
    # Test with inputs: [-218, -162]
    ([-218, -162], 0.0),
    # Test with inputs: [-648, 846]
    ([-648, 846], 391250554917108663172775048714929667738497798435363303973294223238379464120135866435735336800170386675427645011170457483080086052458051584355338863762021052332445835360803981663941706909675599977047734477916429881152669283840766222441525318800453556166034424401987803466272189020343474060826983349419222124813986624020248279949909072902854747523831200362281841335629803437614979467969201134273234118585857171022852706442218181724048926002534455016872772007666813372897733929973702786858471721810539707781794510770356590853948203617848381631667467870803444797268172735657286931744409955885235741485148473957396807990164494953848336369312394247000196546275741568130149598075214028981493547672923627426398265870343852340965423034605021540726974698648314184637168399346638247332192065954622603585966554523615275758279870932115281529173298514216165204740391219472574799446329895247752100907951083999373244722678540047352045446360288521544555700780996497145691993946454706498405461145532435256140990303121864107097336622444427237527052376926109454399704829336405873020605494220550955087248859918906496264146189623682216866794486629508900543664045023958478466819359781680306194049332819317573584744785782598315401916630410915594335710401188906258556850887365151339881859601048899693979472421728834858236446996713393432090849300372669399199111901209539009309869235901455624942533907955872582576022214151983280367198583980970649568434090064627916292224514813140528357880946457537496436312999744088198081187899532567667707350251632641889172365843205028878724607750722403249217003127908039964922450126967464640516737003150546457228727501867772223243668871889772351572807508614006027270841204390065670879522783253199280939303855692912927460461619933046777533243257550262478795285111877069128620604831705521926953537581130382041317584414493865501681141032516899728757130926331184458342887797962439766934963806755842755882108136213236967785069570831485318542555927778130886160034131742360610396257978732875209299862058510870916560365136658213855927797525436584960112712753285943061049153192632925167656945241807595831384233517364288326052027033364799670870023852562010673749012777139662374448057194099861185622211645376268188279356225663277968948570077599867785204178742838880614432903442264219358002641156713088785403985658936210663909862980169960053250195978226408659498463551112823768612864),
    # Test with inputs: [-277, -263]
    ([-277, -263], -0.0),
    # Test with inputs: [-212, -945]
    ([-212, -945], -0.0),
])
def test_power(inputs, expected):
    assert power(*inputs) == expected

def test_power_raises_0():
    # Edge case for a=0 (raises ZeroDivisionError)
    with pytest.raises(ZeroDivisionError):
        power(*[0, -687])


# Tests for function square_root
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0], 0.0),
    # Edge case for a=1
    ([1], 1.0),
    # Edge case for a=100
    ([100], 10.0),
    # Test with inputs: [34]
    ([34], 5.830951894845301),
    # Test with inputs: [640]
    ([640], 25.298221281347036),
    # Test with inputs: [693]
    ([693], 26.324893162176366),
    # Test with inputs: [148]
    ([148], 12.165525060596439),
])
def test_square_root(inputs, expected):
    assert square_root(*inputs) == expected

def test_square_root_raises_0():
    # Edge case for a=-1 (raises ValueError)
    with pytest.raises(ValueError):
        square_root(*[-1])

def test_square_root_raises_1():
    # Edge case for a=-100 (raises ValueError)
    with pytest.raises(ValueError):
        square_root(*[-100])

def test_square_root_raises_2():
    # Test with inputs: [-835] (raises ValueError)
    with pytest.raises(ValueError):
        square_root(*[-835])


# Tests for function subtract
@pytest.mark.parametrize('inputs,expected', [
    # Edge case for a=0
    ([0, -743], 743),
    # Edge case for a=1
    ([1, 68], -67),
    # Edge case for a=-1
    ([-1, -75], 74),
    # Edge case for a=100
    ([100, 606], -506),
    # Edge case for a=-100
    ([-100, 262], -362),
    # Edge case for b=0
    ([208, 0], 208),
    # Edge case for b=1
    ([466, 1], 465),
    # Edge case for b=-1
    ([239, -1], 240),
    # Edge case for b=100
    ([188, 100], 88),
    # Edge case for b=-100
    ([737, -100], 837),
    # Test with inputs: [-374, 367]
    ([-374, 367], -741),
    # Test with inputs: [-807, 8]
    ([-807, 8], -815),
    # Test with inputs: [186, -512]
    ([186, -512], 698),
    # Test with inputs: [-547, 451]
    ([-547, 451], -998),
    # Test with inputs: [-435, 953]
    ([-435, 953], -1388),
])
def test_subtract(inputs, expected):
    assert subtract(*inputs) == expected
