# Automatically generated tests for string_utils using CSV data
import pytest
import dataclasses
import datetime
import typing
from source_files.string_utils import concat, contains, ends_with, get_char_at, length, replace, starts_with, substring, to_lowercase, to_uppercase, trim

# This file was generated by the test_case_generator with CSV data

# Tests for function concat
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for concat
    (['Hello', 'World'], 'HelloWorld'),
    # CSV-defined test for concat
    (['Test', 'String'], 'TestString'),
])
def test_concat(inputs, expected):
    assert concat(*inputs) == expected


# Tests for function contains
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for contains
    (['Hello', 'e'], True),
    # CSV-defined test for contains
    (['Test', 'e'], True),
])
def test_contains(inputs, expected):
    assert contains(*inputs) == expected


# Tests for function ends_with
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for ends_with
    (['Hello', 'o'], True),
    # CSV-defined test for ends_with
    (['Test', 't'], True),
])
def test_ends_with(inputs, expected):
    assert ends_with(*inputs) == expected


# Tests for function get_char_at
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for get_char_at
    (['Hello', 0], 'H'),
    # CSV-defined test for get_char_at
    (['Test', 0], 'T'),
])
def test_get_char_at(inputs, expected):
    assert get_char_at(*inputs) == expected


# Tests for function length
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for length
    (['Hello'], 5),
    # CSV-defined test for length
    (['Test'], 4),
])
def test_length(inputs, expected):
    assert length(*inputs) == expected


# Tests for function replace
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for replace
    (['Hello', 'H', 'X'], 'Xello'),
    # CSV-defined test for replace
    (['Test', 'T', 'X'], 'Xest'),
])
def test_replace(inputs, expected):
    assert replace(*inputs) == expected


# Tests for function starts_with
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for starts_with
    ([None, None], True),
    # CSV-defined test for starts_with
    ([None, None], True),
])
def test_starts_with(inputs, expected):
    assert starts_with(*inputs) == expected


# Tests for function substring
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for substring
    (['Hello', 0, 3], 'Hel'),
    # CSV-defined test for substring
    (['Test', 0, 3], 'Tes'),
])
def test_substring(inputs, expected):
    assert substring(*inputs) == expected


# Tests for function to_lowercase
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for to_lowercase
    (['Hello'], 'hello'),
    # CSV-defined test for to_lowercase
    (['Test'], 'test'),
])
def test_to_lowercase(inputs, expected):
    assert to_lowercase(*inputs) == expected


# Tests for function to_uppercase
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for to_uppercase
    (['Hello'], 'HELLO'),
    # CSV-defined test for to_uppercase
    (['Test'], 'TEST'),
])
def test_to_uppercase(inputs, expected):
    assert to_uppercase(*inputs) == expected


# Tests for function trim
@pytest.mark.parametrize('inputs,expected', [
    # CSV-defined test for trim
    (['Hello'], 'Hello'),
    # CSV-defined test for trim
    (['Test'], 'Test'),
])
def test_trim(inputs, expected):
    assert trim(*inputs) == expected
